name: 🚀 Production Deployment

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ==================== テスト ==================== #
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ai_subsidy_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: 📦 Install dependencies
      run: |
        npm ci
        cd frontend && npm ci
        cd ../backend && npm ci

    - name: 🔧 Setup test environment
      run: |
        cp .env.example .env.test
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/ai_subsidy_test" >> .env.test
        echo "REDIS_URL=redis://localhost:6379" >> .env.test
        echo "NODE_ENV=test" >> .env.test

    - name: 🗄️ Setup database
      run: |
        cd backend
        npm run db:migrate:test
        npm run db:seed:test

    - name: 🧪 Run backend tests
      run: |
        cd backend
        npm run test:coverage

    - name: 🎨 Run frontend tests
      run: |
        cd frontend
        npm run test:coverage

    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./backend/coverage/lcov.info,./frontend/coverage/lcov.info

  # ==================== ビルド ==================== #
  build:
    name: 🏗️ Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📝 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_ENV=production
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}

  # ==================== セキュリティスキャン ==================== #
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: 🛡️ Run npm audit
      run: |
        npm audit --audit-level moderate
        cd frontend && npm audit --audit-level moderate
        cd ../backend && npm audit --audit-level moderate

  # ==================== 本番デプロイ ==================== #
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://your-domain.com
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ⚙️ Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: 🚀 Deploy to ECS
      run: |
        # ECSタスク定義更新
        aws ecs update-service \
          --cluster ai-subsidy-production \
          --service ai-subsidy-app \
          --force-new-deployment \
          --task-definition ai-subsidy-app:REVISION

    - name: ⏳ Wait for deployment
      run: |
        aws ecs wait services-stable \
          --cluster ai-subsidy-production \
          --services ai-subsidy-app

    - name: 🏥 Health check
      run: |
        curl -f https://your-domain.com/api/health || exit 1

    - name: 📢 Notify Slack on success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        title: '✅ Production Deployment Successful'
        message: |
          🚀 AI補助金システムが正常にデプロイされました
          📦 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          🔗 URL: https://your-domain.com
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

    - name: 📢 Notify Slack on failure  
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        title: '❌ Production Deployment Failed'
        message: |
          🚨 デプロイに失敗しました
          📋 ログを確認してください: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # ==================== ロールバック準備 ==================== #
  prepare-rollback:
    name: 🔄 Prepare Rollback
    runs-on: ubuntu-latest
    needs: deploy
    if: always() && needs.deploy.result == 'failure'
    
    steps:
    - name: 🔄 Automatic Rollback
      run: |
        aws ecs update-service \
          --cluster ai-subsidy-production \
          --service ai-subsidy-app \
          --task-definition ai-subsidy-app:PREVIOUS